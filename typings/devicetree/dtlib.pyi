"""
This type stub file was generated by pyright.
"""

import enum
from typing import Iterable, List, NamedTuple, Optional, Union

class DTError(Exception): ...

class Node:
    def __init__(self, name: str, parent: Optional[Node], dt: DT) -> None: ...
    @property
    def unit_addr(self) -> str: ...
    @property
    def path(self) -> str: ...
    def node_iter(self) -> Iterable[Node]: ...
    def __str__(self) -> str: ...
    def __repr__(self) -> str: ...

class Type(enum.IntEnum):
    EMPTY = ...
    BYTES = ...
    NUM = ...
    NUMS = ...
    STRING = ...
    STRINGS = ...
    PATH = ...
    PHANDLE = ...
    PHANDLES = ...
    PHANDLES_AND_NUMS = ...
    COMPOUND = ...

class _MarkerType(enum.IntEnum):
    PATH = ...
    PHANDLE = ...
    LABEL = ...
    UINT8 = ...
    UINT16 = ...
    UINT32 = ...
    UINT64 = ...
    STRING = ...

class Property:
    def __init__(self, node: Node, name: str) -> None: ...
    def to_num(self, signed: bool = ...) -> int: ...
    def to_nums(self, signed: bool = ...) -> List[int]: ...
    def to_bytes(self) -> bytes: ...
    def to_string(self) -> str: ...
    def to_strings(self) -> List[str]: ...
    def to_node(self) -> Node: ...
    def to_nodes(self) -> List[Node]: ...
    def to_path(self) -> Node: ...
    @property
    def type(self) -> int: ...
    def __str__(self) -> str: ...
    def __repr__(self) -> str: ...

class _T(enum.IntEnum):
    INCLUDE = ...
    LINE = ...
    STRING = ...
    DTS_V1 = ...
    PLUGIN = ...
    MEMRESERVE = ...
    BITS = ...
    DEL_PROP = ...
    DEL_NODE = ...
    OMIT_IF_NO_REF = ...
    LABEL = ...
    CHAR_LITERAL = ...
    REF = ...
    INCBIN = ...
    SKIP = ...
    EOF = ...
    NUM = ...
    PROPNODENAME = ...
    MISC = ...
    BYTE = ...
    BAD = ...

class _FileStackElt(NamedTuple):
    filename: str
    lineno: int
    contents: str
    pos: int
    ...

_TokVal = Union[int, str]

class _Token(NamedTuple):
    id: int
    val: _TokVal
    def __repr__(self) -> str: ...

class DT:
    def __init__(
        self, filename: str, include_path: Iterable[str] = ..., force: bool = ...
    ) -> None: ...
    @property
    def root(self) -> Node: ...
    def get_node(self, path: str) -> Node: ...
    def has_node(self, path: str) -> bool: ...
    def node_iter(self) -> Iterable[Node]: ...
    def __str__(self) -> str: ...
    def __repr__(self) -> str: ...

def to_num(data: bytes, length: Optional[int] = ..., signed: bool = ...) -> int: ...
def to_nums(data: bytes, length: int = ..., signed: bool = ...) -> List[int]: ...

_escape_table = ...
_DEFAULT = ...
_EXPECT_PROPNODENAME = ...
_EXPECT_BYTE = ...
_num_re = ...
_propnodename_re = ...
_nodename_chars = ...
_misc_re = ...
_byte_re = ...
_unescape_re = ...
_token_re = ...
_TYPE_TO_N_BYTES = ...
_N_BYTES_TO_TYPE = ...
_N_BYTES_TO_START_STR = ...
_N_BYTES_TO_END_STR = ...
